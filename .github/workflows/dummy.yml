name: Dummy for test

on:
  workflow_dispatch:

jobs:
  build:
    name: Build # ビルド

    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Build with Gradle
        run: ./gradlew assembleDebug
      - name: Upload apk file
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: app/build/outputs/apk/debug/app-debug.apk

  release:
    name: Generate Release Note
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download apk file
        uses: actions/download-artifact@v3
        with:
          name: apk
      - name: Generate Release Note
        uses: actions/github-script@v6
        id: release-note
        with: # 試作
          result-encoding: string
          script: |
            
            function zeroPadding(NUM, LEN){
              return ( Array(LEN).join('0') + NUM ).slice( -LEN );
            }
            
            const date = new Date();
            let tag_name = `v${date.getFullYear()}.${zeroPadding(date.getMonth()+1, 2)}.${zeroPadding(date.getDate(), 2)}.`;
            let prev_tag_name = ''
            try{
              const {data: latest} = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const micro = Number(latest.tag_name.split('.')[3]);
              tag_name += `${micro + 1}`;
              prev_tag_name = latest.tag_name;
            }catch(e){
              console.log(e);
              if(e.status === 404){
                tag_name += '0';
              }else{
                throw e;
              }
            }
            console.log(tag_name);
            
            const {data: generated} = github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag_name,
              previews_tag_name: prev_tag_name,
            });
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: generated.name,
              body: generated.body,
              tag_name: tag_name,
              generate_release_notes: true,
            });
      - name: upload asset
        uses: actions/github-script@v6
        id: upload-asset
        with:
          script: |
            const fs = require('fs');
            const {data: latest} = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const buf = fs.readFileSync("./app-debug.apk");
            const data = buf.toString('base64');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: Number(latest.id),
              name: 'app-debug.apk',
              data: data,
            });

